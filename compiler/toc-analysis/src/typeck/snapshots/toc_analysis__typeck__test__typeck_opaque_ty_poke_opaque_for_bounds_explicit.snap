---
source: compiler/toc-analysis/src/typeck/test.rs
expression: "module m\n    export opaque t, v\n    type t : int\n    var v : t\n    for _ : v .. v end for\nend m\n\nfor _ : m.v .. m.v end for\n"
---
"m"@(FileId(1), 7..8) [Module(No)]: <error>
"t"@(FileId(1), 41..42) [Type]: opaque[DefId(PackageId(0), LocalDefId(1))] type to int
"v"@(FileId(1), 57..58) [ConstVar(Var, No)]: opaque[DefId(PackageId(0), LocalDefId(1))] type to int
"_"@(FileId(1), 71..72) [ConstVar(Const, No)]: alias[DefId(PackageId(0), LocalDefId(1))] of int
"_"@(FileId(1), 101..102) [ConstVar(Const, No)]: opaque[DefId(PackageId(0), LocalDefId(1))] type to int
"t"@(FileId(1), 27..28) [Export]: opaque[DefId(PackageId(0), LocalDefId(1))] type to int
"v"@(FileId(1), 30..31) [Export]: opaque[DefId(PackageId(0), LocalDefId(1))] type to int
"<root>"@(dummy) [Module(No)]: <error>

error at (FileId(1), 105..115): mismatched types
| note for (FileId(1), 112..115): this is of type `t (an opaque type)`
| note for (FileId(1), 105..108): this is also of type `t (an opaque type)`
| error for (FileId(1), 105..115): expected index types
| info: range bounds types must both be index types (an integer, `boolean`, `char`, enumerated type, or a range)
