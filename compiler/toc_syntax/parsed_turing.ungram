// Turing Ungrammar, matching parse tree

Name =
  'identifier'

NameList =
  names:( Name ( ',' Name )* )

//*************//
// Attributes  //
//*************//

// We only care about the presence of the node, so the tokens can be hidden

UnqualifiedAttr =
  attr:( '~' '.' | 'unqualified' )

PervasiveAttr =
  attr:( '*' | 'pervasive' )

RegisterAttr =
  attr:'register'

ConstAttr =
  attr:'const'

VarAttr =
  attr:'var'

CheatAttr =
  attr:'cheat'

ForwardAttr =
  attr:'forward'

OpaqueAttr =
  attr:'opaque'

//***************************//
//      Top Level Items      //
//***************************//

Source =
  ( 'unit' | ImportStmt )?
  StmtList

//***************************//
//  Preprocessor Definitions //
//***************************//

// Only in Stmt position
PreprocGlob =
  directive:PreprocKind

PreprocKind =
  PPInclude
| PPIf
| PPElseif
| PPElse
| PPEndIf

PPInclude =
  'include' path:LiteralExpr

PPIf =
  '#if' condition:PPExpr 'then'
    PPTokenBody
  false_branch:PPFalseBranch?
  PPEndIf

PPElseif =
  ( '#elseif' | '#elsif' ) condition:PPExpr 'then'
    PPTokenBody
  false_branch:PPFalseBranch?

PPFalseBranch =
  PPElseif
| PPElse

PPElse =
  '#else' PPTokenBody

PPEndIf =
  '#end' 'if'
| '#endif'

PPExpr =
  PPBinaryExpr
| PPUnaryExpr
| PPNameExpr
| PPParenExpr

PPBinaryExpr =
  lhs:PPExpr
  op:( 'and' | 'or' )
  rhs:PPExpr

PPUnaryExpr =
  op:( 'not' )
  rhs:PPExpr

PPNameExpr =
  Name

PPParenExpr =
  '(' PPExpr ')'

PPTokenBody =
  stmts:Stmt*

//***************************//
// Statements & Declarations //
//***************************//

Stmt =
  ConstVarDecl
| TypeDecl
| BindDecl
| ProcDecl
| FcnDecl
| ProcessDecl
| ExternalDecl
| ForwardDecl
| DeferredDecl
| BodyDecl
| ModuleDecl
| ClassDecl
| MonitorDecl
| AssignStmt
| OpenStmt
| CloseStmt
| PutStmt
| GetStmt
| ReadStmt
| WriteStmt
| SeekStmt
| TellStmt
| ForStmt
| LoopStmt
| ExitStmt
| IfStmt
| CaseStmt
| BlockStmt
| InvariantStmt
| AssertStmt
| CallStmt
| ReturnStmt
| ResultStmt
| NewStmt
| FreeStmt
| TagStmt
| ForkStmt
| SignalStmt
| PauseStmt
| QuitStmt
| BreakStmt
| CheckednessStmt
| PreStmt
| InitStmt
| PostStmt
| HandlerStmt
| InheritStmt
| ImplementStmt
| ImplementByStmt
| ImportStmt
| ExportStmt
| PreprocGlob

StmtList =
  stmts:Stmt*

ConstVarDecl =
  ( 'var' | 'const' )
  PervasiveAttr? RegisterAttr?
  decl_list:NameList
  ( ':' type_spec:Type )?
  ( ':=' init:Expr )?

TypeDecl =
  'type' PervasiveAttr? decl_name:Name ':' ( 'forward' | named_ty:Type )

BindDecl =
  'bind' bindings:( BindItem ( ',' BindItem )* )

BindItem =
  as_var:VarAttr
  to_register:RegisterAttr
  bind_as:Name
  'to' Expr
  
ProcDecl =
  ProcHeader
    ImportStmt?
    PreStmt?
    InitStmt?
    PostStmt?
    HandlerStmt?
    StmtList
  EndGroup

ProcHeader =
  'procedure' PervasiveAttr? Name params:ParamSpec? DeviceSpec?

DeviceSpec =
  ':' Expr

FcnDecl =
  FcnHeader
    ImportStmt?
    PreStmt?
    InitStmt?
    PostStmt?
    HandlerStmt?
    StmtList
  EndGroup

FcnHeader =
  'function' PervasiveAttr? Name ParamSpec? FcnResult

FcnResult =
  Name? ':' Type

SubprogHeader =
  ProcHeader
| FcnHeader

ForwardDecl =
  'forward' SubprogHeader ( 'import' ImportList )?

DeferredDecl =
  'deferred' SubprogHeader

BodyDecl =
  'body' BodyKind
    PreStmt?
    InitStmt?
    PostStmt?
    HandlerStmt?
    StmtList
  EndGroup

BodyKind =
  PlainHeader
| ProcHeader
| FcnHeader

PlainHeader =
  Name ParamSpec? FcnResult?

ProcessDecl =
  'process' PervasiveAttr? Name ParamSpec? ( ':' stack_size:Expr )?
    ImportStmt?
    PreStmt?
    InitStmt?
    PostStmt?
    HandlerStmt?
    StmtList
  EndGroup

ExternalDecl =
  'external' external_spec:Expr? ExternalKind

ExternalKind =
  ExternalFcn:FcnHeader
| ExternalProc:ProcHeader
| ExternalVar

ExternalVar =
  'var' Name ( ':' Type )? ( ':=' Expr )?

ModuleDecl =
  'module' PervasiveAttr? Name
    ImplementStmt?
    ImplementByStmt?
    ImportStmt?
    ExportStmt?
    PreStmt?
    StmtList
    PostStmt?
  EndGroup

ClassDecl =
  'monitor'? 'class' PervasiveAttr? Name DeviceSpec?
    InheritStmt?
    ImplementStmt?
    ImplementByStmt?
    ImportStmt?
    ExportStmt?
    PreStmt?
    StmtList
    PostStmt?
  EndGroup

MonitorDecl =
  'monitor' PervasiveAttr? Name DeviceSpec?
    ImplementStmt?
    ImplementByStmt?
    ImportStmt?
    ExportStmt?
    PreStmt?
    StmtList
    PostStmt?
  EndGroup

AssignStmt =
  lhs:Expr
  AsnOp
  rhs:Expr

AsnOp = 
  asn_kind:(
    ':='
  | '=>' '='
  | 'or' '='
  | '|' '=' // alias
  | 'and' '='
  | '&' '=' // alias
  | '+' '='
  | '-' '='
  | 'xor' '='
  | '*' '='
  | '/' '='
  | 'div' '='
  | 'mod' '='
  | 'rem' '='
  | 'shl' '='
  | 'shr' '='
  | '**' '='
  )

OpenStmt =
  'open' OpenKind
  
OpenKind =
  OldOpen
| NewOpen

OldOpen =
  '(' Expr ',' OpenPath ',' OpenMode ')'

OpenPath =
  Expr

OpenMode =
  Expr

NewOpen =
  ':' Expr ',' OpenPath ',' io_caps:( IoCap ( ',' IoCap )* )

IoCap =
  io_kind:(
    'get'  | 'put'
  | 'read' | 'write'
  | 'seek' | 'mod'
  )

CloseStmt =
  'close' CloseKind
  
CloseKind =
  OldClose
| NewClose

OldClose =
  '(' Expr ')'

NewClose =
  ':' Expr

PutStmt =
  'put' ( StreamNum ',' )? items:( PutItem ( ',' PutItem )* ) '..'?

// Propose to change to PutKind alternation, PutItem putting, SkipItem covering both
PutItem =
  'skip'
| Expr width:PutOpt? fraction:PutOpt? exp_width:PutOpt?

PutOpt =
  ':' Expr

GetStmt =
  'get' ( StreamNum ',' )? items:( GetItem ( ',' GetItem )* )

// Propose to change to GetKind alternation, GetItem getting, SkipItem covering both
GetItem =
  'skip'
| Expr GetWidth?

GetWidth =
  ':' ( Expr | '*' )

ReadStmt =
  'read' BinaryIO

WriteStmt =
  'write' BinaryIO
  
BinaryIO =
  StreamNum ( ':' status:Expr )? ',' items:( BinaryItem ( ',' BinaryItem )* )

BinaryItem =
  Expr RequestSize? ActualSize? 

RequestSize =
  ':' Expr

ActualSize =
  ':' Expr

SeekStmt =
  'seek' StreamNum ',' ( '*' | seek_to:Expr )

TellStmt =
  'tell' StreamNum ',' tell_to:Expr

StreamNum =
  ':' Expr

ForStmt =
  'for' 'decreasing'? Name? ':' ForBounds steps:StepBy?
    StmtList
  EndGroup

ForBounds =
  start:Expr ( '..' end:Expr )?

StepBy =
  'by' Expr

LoopStmt =
  'loop'
    StmtList
  EndGroup

ExitStmt =
  'exit' ( 'when' condition:Expr )?

IfStmt =
  'if' IfBody
  EndGroup

IfBody =
  condition:Expr 'then'
    true_branch:StmtList
    false_branch:FalseBranch?

FalseBranch =
  ElseifStmt
| ElseStmt

ElseStmt =
  'else' StmtList EndGroup?

ElseifStmt =
  ( 'elsif' | 'elseif' ) IfBody EndGroup?

CaseStmt =
  'case' Expr 'of'
    CaseArm*
  EndGroup

CaseArm =
  'label' select:ExprList? ':'
      StmtList

BlockStmt =
  'begin' StmtList EndGroup

InvariantStmt =
  'invariant' condition:Expr

AssertStmt =
  'assert' condition:Expr

CallStmt =
  Expr // CallExpr & bare RefExpr are contained in Expr

ReturnStmt =
  'return'

ResultStmt =
  'result' Expr

NewStmt =
  'new' ExprList

FreeStmt =
  'free' ExprList

TagStmt =
  'tag' tag_ref:Expr ',' tag_val:Expr

ForkStmt =
  'fork' Expr ParamList? ForkStatus? StackSize? ProcessDesc?

ForkStatus =
  ':' Expr

StackSize =
  ',' Expr

ProcessDesc =
  ',' Expr

SignalStmt =
  'signal' Expr

WaitStmt =
  'wait' wait_ref:Expr ( ',' wait_arg:Expr )?

PauseStmt =
  'pause' Expr

QuitStmt =
  'quit' reason:QuitCause? ( ':' quit_code:Expr )?

QuitCause =
  AtCaller:'<' // Caller failiure
| BubbleUp:'>' // Exception bubbling/passthrough

BreakStmt =
  'break'

CheckednessStmt =
  Checkedness

PreStmt =
  'pre' condition:Expr

InitStmt =
  'init' ( InitVar ( ',' InitVar )* )

InitVar =
  Name ':=' Expr

PostStmt =
  'post' condition:Expr

HandlerStmt =
  'handler' '(' Name ')'
    stmts:StmtList
  EndGroup

ImportStmt =
  'import' '('? imports:ImportList ')'?

ImportList =
  ( ImportItem ( ',' ImportItem )* )

ImportItem =
  attrs:ImportAttr? ExternalItem

ImportAttr =
  VarAttr
| ConstAttr
| ForwardAttr

ExportStmt =
  'export' '('? exports:( ExportItem ( ',' ExportItem )* ) ')'?

ExportItem =
  attrs:ExportAttr* ( Name | 'all' )

ExportAttr =
  VarAttr
| UnqualifiedAttr
| PervasiveAttr
| OpaqueAttr

InheritStmt =
  'inherit' '('? ExternalItem ')'?

ImplementStmt =
  'implement' '('? ExternalItem ')'?

ImplementByStmt =
  'implement' 'by' '('? ExternalItem ')'?

// LiteralExpr can only be a string literal
// Valid forms are:
// 'string_literal'
// Name
// Name in 'string_literal'
ExternalItem =
  Name? 'in'? path:LiteralExpr?

//*************//
// Expressions //
//*************//

ExprList =
  exprs:( Expr ( ',' Expr )* )

Expr =
  LiteralExpr // primary expr
| ObjClassExpr // primary expr
| InitExpr  // primary expr
| NilExpr  // primary expr
| SizeOfExpr // primary expr
| BinaryExpr
| UnaryExpr
| ParenExpr
// References below
| NameExpr
| SelfExpr
| FieldExpr
| DerefExpr
| CheatExpr
| NatCheatExpr
| ArrowExpr
| IndirectExpr
| BitsExpr
| CallExpr

LiteralExpr =
  literal:(
    'int_literal'    // basic digits
  | 'radix_literal'  // 16#00AA
  | 'real_literal'   // .1 or 1.0 or 1e-5 or 1.0e10
  | 'char_literal'   // 'eee'
  | 'string_literal' // "fff"
  | 'true' | 'false' // bool literals
  )

ObjClassExpr =
  'objectclass' '(' Expr ')'

InitExpr =
  'init' '('
    ExprList
  ')'

NilExpr =
  'nil' '('
    Expr
  ')'

SizeOfExpr =
  'sizeof' '(' ( ty_size:Type | ref_size:Expr ) ')'

BinaryExpr =
  lhs:Expr
  op:(
    // Sorted by prec level (lowest to highest)
    '=>'
  | 'or' | '|'  // aliases
  | 'and' | '&' // aliases
  | '<' | '>' | '=' | '<=' | '>=' | NotEq | 'in' | NotIn
  | '+' | '-' | 'xor'
  | '*' | '/' | 'div' | 'mod' | 'rem' | 'shl' | 'shr'
  | '**'
  )
  rhs:Expr

NotEq =
 ( 'not' | '~' ) '='

NotIn =
 ( 'not' | '~' ) 'in'

UnaryExpr =
  op:(
    // Sorted by prec level (lowest to highest)
    'not' | '~' // aliases
  | '+' | '-'
  )
  rhs:Expr

ParenExpr =
  '(' Expr ')'

//*************//
// References  //
//*************//

NameExpr =
  Name

SelfExpr =
  'self'

FieldExpr =
  Expr '.' Name

ArrowExpr =
  Expr '->' Name

DerefExpr =
  '^' Expr

// as reference if Expr is a Reference, otherwise as expr
// Turing: register var refs are not considered as valid lhs exprs
CheatExpr =
  'cheat' '(' Type ',' Expr SizeSpec? ')'

SizeSpec =
  ':' Expr

NatCheatExpr =
  '#' Expr

IndirectExpr =
  IndirectTy '@' '(' Expr ')'

IndirectTy =
  PrimType
| NameType

BitsExpr =
  'bits' ParamList

// Covers Substring, Subscript, FcnCall
// Covers PointerSpec, SetCons
CallExpr =
  Expr ParamList

ParamList =
  '(' Param* ')'

Param =
  ParamKind ','?

ParamKind =
  AllItem
| RangeItem
| Expr

AllItem =
  'all'

RangeItem =
  start:RangeBound ( '..' end:RangeBound )?

RangeBound =
  RelativeBound
| Expr

RelativeBound =
  '*' ( '-' Expr )?

//*************//
//    Types    //
//*************//

Type =
  PrimType
| NameType
| RangeType
| EnumType
| ArrayType
| SetType
| RecordType
| UnionType
| PointerType
| FcnType
| ProcType
| CollectionType
| ConditionType

// TODO: 64-bit ints & nats
PrimType =
  prim:(
    'int' | 'int1' | 'int2' | 'int4'
  | 'nat' | 'nat1' | 'nat2' | 'nat4'
  | 'real' | 'real4' | 'real8'
  | 'boolean'
  | 'addressint'
  | 'char' | 'string'
  | SizedCharType | SizedStringType
  )

SizedCharType =
  'char' '(' SeqLength ')'

SizedStringType =
  'string' '(' SeqLength ')'

// Wrap star in DynLength?
SeqLength =
  Expr
| '*'

NameType =
  Expr

RangeType =
  start:Expr '..' end:EndBound

EndBound =
  UnsizedBound
| Expr

UnsizedBound =
  '*'

EnumType =
  'enum' '(' fields:( Name ( ',' Name )* ) ')'

ArrayType =
  'flexible'? 'array' RangeList 'of' elem_ty:Type

RangeList =
  ranges:( Type ( ',' Type )* )

SetType =
  'set' 'of' elem_ty:Type

RecordType =
  'packed'? 'record'
    RecordField*
  EndGroup

UnionType =
  'packed'? 'union' tag_name:Name? ':' range_ty:Type 'of'
    UnionVariant*
  EndGroup

UnionVariant =
  'label' selectors:ExprList? ':'
    RecordField*

RecordField =
  field_names:NameList ':' field_ty:Type ';'?

PointerType =
  is_checked:Checkedness?
  ( 'pointer' 'to' | '^' )
  to_ty:Type


Checkedness =
  'checked'
| 'unchecked'

FcnType =
  'function' Name? ParamSpec? ':' Type

ProcType =
  'procedure' Name? ParamSpec?

SubprogType =
  FcnType
| ProcType

ParamSpec =
  ( ParamDecl ( ',' ParamDecl )* )

ParamDecl =
  ConstVarParam
| SubprogParam:SubprogType

ConstVarParam =
  pass_as_ref:VarAttr?
  bind_to_register:RegisterAttr?
  param_names:NameList
  ':' coerce_type:CheatAttr? param_ty:Type

CollectionType =
  'collection' 'of' ( elem_ty:Type | ( 'forward' Name ) )

ConditionType =
  ConditionKind? 'condition'

ConditionKind =
  'priority'
| 'deferred'
| 'timeout'

//*************//
//    Misc     //
//*************//

EndGroup =
  'end'
| 'end' 'identifier'
| 'end' 'case'
| 'end' 'for'
| 'end' 'if'
| 'end' 'loop'
| 'end' 'handler'
| 'end' 'union'
| 'end' 'record'
| 'endcase'
| 'endfor'
| 'endif'
| 'endloop'